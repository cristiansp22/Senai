import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var DeviceMotion = /** @class */ (function (_super) {
    __extends(DeviceMotion, _super);
    function DeviceMotion() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeviceMotion.prototype.getCurrentAcceleration = function () { return cordova(this, "getCurrentAcceleration", {}, arguments); };
    DeviceMotion.prototype.watchAcceleration = function (options) { return cordova(this, "watchAcceleration", { "callbackOrder": "reverse", "observable": true, "clearFunction": "clearWatch" }, arguments); };
    DeviceMotion.pluginName = "DeviceMotion";
    DeviceMotion.plugin = "cordova-plugin-device-motion";
    DeviceMotion.pluginRef = "navigator.accelerometer";
    DeviceMotion.repo = "https://github.com/apache/cordova-plugin-device-motion";
    DeviceMotion.platforms = ["Android", "BlackBerry 10", "Browser", "Firefox OS", "iOS", "Tizen", "Ubuntu", "Windows", "Windows Phone 8"];
    DeviceMotion = __decorate([
        Injectable()
    ], DeviceMotion);
    return DeviceMotion;
}(IonicNativePlugin));
export { DeviceMotion };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2RldmljZS1tb3Rpb24vbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUFpRkEsZ0NBQWlCOzs7O0lBTWpELDZDQUFzQjtJQWN0Qix3Q0FBaUIsYUFBQyxPQUEwQzs7Ozs7O0lBcEJqRCxZQUFZO1FBRHhCLFVBQVUsRUFBRTtPQUNBLFlBQVk7dUJBbkZ6QjtFQW1Ga0MsaUJBQWlCO1NBQXRDLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGludGVyZmFjZSBEZXZpY2VNb3Rpb25BY2NlbGVyYXRpb25EYXRhIHtcbiAgLyoqXG4gICAqIEFtb3VudCBvZiBhY2NlbGVyYXRpb24gb24gdGhlIHgtYXhpcy4gKGluIG0vc14yKVxuICAgKi9cbiAgeDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBBbW91bnQgb2YgYWNjZWxlcmF0aW9uIG9uIHRoZSB5LWF4aXMuIChpbiBtL3NeMilcbiAgICovXG4gIHk6IG51bWJlcjtcblxuICAvKipcbiAgICogQW1vdW50IG9mIGFjY2VsZXJhdGlvbiBvbiB0aGUgei1heGlzLiAoaW4gbS9zXjIpXG4gICAqL1xuICB6OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIENyZWF0aW9uIHRpbWVzdGFtcCBpbiBtaWxsaXNlY29uZHMuXG4gICAqL1xuICB0aW1lc3RhbXA6IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEZXZpY2VNb3Rpb25BY2NlbGVyb21ldGVyT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBSZXF1ZXN0ZWQgcGVyaW9kIG9mIGNhbGxzIHRvIGFjY2VsZXJvbWV0ZXJTdWNjZXNzIHdpdGggYWNjZWxlcmF0aW9uIGRhdGEgaW4gTWlsbGlzZWNvbmRzLiBEZWZhdWx0OiAxMDAwMFxuICAgKi9cbiAgZnJlcXVlbmN5PzogbnVtYmVyO1xufVxuXG4vKipcbiAqIEBuYW1lIERldmljZSBNb3Rpb25cbiAqIEBkZXNjcmlwdGlvblxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGBjb3Jkb3ZhLXBsdWdpbi1kZXZpY2UtbW90aW9uYC4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW0RldmljZSBNb3Rpb24gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb3Jkb3ZhLXBsdWdpbi1kZXZpY2UtbW90aW9uKS5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IERldmljZU1vdGlvbiwgRGV2aWNlTW90aW9uQWNjZWxlcmF0aW9uRGF0YSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvZGV2aWNlLW1vdGlvbi9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZGV2aWNlTW90aW9uOiBEZXZpY2VNb3Rpb24pIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIC8vIEdldCB0aGUgZGV2aWNlIGN1cnJlbnQgYWNjZWxlcmF0aW9uXG4gKiB0aGlzLmRldmljZU1vdGlvbi5nZXRDdXJyZW50QWNjZWxlcmF0aW9uKCkudGhlbihcbiAqICAgKGFjY2VsZXJhdGlvbjogRGV2aWNlTW90aW9uQWNjZWxlcmF0aW9uRGF0YSkgPT4gY29uc29sZS5sb2coYWNjZWxlcmF0aW9uKSxcbiAqICAgKGVycm9yOiBhbnkpID0+IGNvbnNvbGUubG9nKGVycm9yKVxuICogKTtcbiAqXG4gKiAvLyBXYXRjaCBkZXZpY2UgYWNjZWxlcmF0aW9uXG4gKiB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5kZXZpY2VNb3Rpb24ud2F0Y2hBY2NlbGVyYXRpb24oKS5zdWJzY3JpYmUoKGFjY2VsZXJhdGlvbjogRGV2aWNlTW90aW9uQWNjZWxlcmF0aW9uRGF0YSkgPT4ge1xuICogICBjb25zb2xlLmxvZyhhY2NlbGVyYXRpb24pO1xuICogfSk7XG4gKlxuICogLy8gU3RvcCB3YXRjaFxuICogc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gKlxuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogRGV2aWNlTW90aW9uQWNjZWxlcmF0aW9uRGF0YVxuICogRGV2aWNlTW90aW9uQWNjZWxlcm9tZXRlck9wdGlvbnNcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdEZXZpY2VNb3Rpb24nLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1kZXZpY2UtbW90aW9uJyxcbiAgcGx1Z2luUmVmOiAnbmF2aWdhdG9yLmFjY2VsZXJvbWV0ZXInLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb3Jkb3ZhLXBsdWdpbi1kZXZpY2UtbW90aW9uJyxcbiAgcGxhdGZvcm1zOiBbXG4gICAgJ0FuZHJvaWQnLFxuICAgICdCbGFja0JlcnJ5IDEwJyxcbiAgICAnQnJvd3NlcicsXG4gICAgJ0ZpcmVmb3ggT1MnLFxuICAgICdpT1MnLFxuICAgICdUaXplbicsXG4gICAgJ1VidW50dScsXG4gICAgJ1dpbmRvd3MnLFxuICAgICdXaW5kb3dzIFBob25lIDgnLFxuICBdLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEZXZpY2VNb3Rpb24gZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBHZXQgdGhlIGN1cnJlbnQgYWNjZWxlcmF0aW9uIGFsb25nIHRoZSB4LCB5LCBhbmQgeiBheGVzLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxEZXZpY2VNb3Rpb25BY2NlbGVyYXRpb25EYXRhPn0gUmV0dXJucyBvYmplY3Qgd2l0aCB4LCB5LCB6LCBhbmQgdGltZXN0YW1wIHByb3BlcnRpZXNcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZ2V0Q3VycmVudEFjY2VsZXJhdGlvbigpOiBQcm9taXNlPERldmljZU1vdGlvbkFjY2VsZXJhdGlvbkRhdGE+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogV2F0Y2ggdGhlIGRldmljZSBhY2NlbGVyYXRpb24uIENsZWFyIHRoZSB3YXRjaCBieSB1bnN1YnNjcmliaW5nIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAqIEBwYXJhbSB7QWNjZWxlcm9tZXRlck9wdGlvbnN9IG9wdGlvbnMgbGlzdCBvZiBvcHRpb25zIGZvciB0aGUgYWNjZWxlcm9tZXRlci5cbiAgICogQHJldHVybnMge09ic2VydmFibGU8RGV2aWNlTW90aW9uQWNjZWxlcmF0aW9uRGF0YT59IE9ic2VydmFibGUgcmV0dXJucyBhbiBvYnNlcnZhYmxlIHRoYXQgeW91IGNhbiBzdWJzY3JpYmUgdG9cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgICBjbGVhckZ1bmN0aW9uOiAnY2xlYXJXYXRjaCcsXG4gIH0pXG4gIHdhdGNoQWNjZWxlcmF0aW9uKG9wdGlvbnM/OiBEZXZpY2VNb3Rpb25BY2NlbGVyb21ldGVyT3B0aW9ucyk6IE9ic2VydmFibGU8RGV2aWNlTW90aW9uQWNjZWxlcmF0aW9uRGF0YT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19