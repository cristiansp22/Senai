var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var DeviceMotionOriginal = /** @class */ (function (_super) {
    __extends(DeviceMotionOriginal, _super);
    function DeviceMotionOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeviceMotionOriginal.prototype.getCurrentAcceleration = function () { return cordova(this, "getCurrentAcceleration", {}, arguments); };
    DeviceMotionOriginal.prototype.watchAcceleration = function (options) { return cordova(this, "watchAcceleration", { "callbackOrder": "reverse", "observable": true, "clearFunction": "clearWatch" }, arguments); };
    DeviceMotionOriginal.pluginName = "DeviceMotion";
    DeviceMotionOriginal.plugin = "cordova-plugin-device-motion";
    DeviceMotionOriginal.pluginRef = "navigator.accelerometer";
    DeviceMotionOriginal.repo = "https://github.com/apache/cordova-plugin-device-motion";
    DeviceMotionOriginal.platforms = ["Android", "BlackBerry 10", "Browser", "Firefox OS", "iOS", "Tizen", "Ubuntu", "Windows", "Windows Phone 8"];
    return DeviceMotionOriginal;
}(IonicNativePlugin));
var DeviceMotion = new DeviceMotionOriginal();
export { DeviceMotion };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2RldmljZS1tb3Rpb24vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUFpRkEsZ0NBQWlCOzs7O0lBTWpELDZDQUFzQjtJQWN0Qix3Q0FBaUIsYUFBQyxPQUEwQzs7Ozs7O3VCQXZHOUQ7RUFtRmtDLGlCQUFpQjtTQUF0QyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGV2aWNlTW90aW9uQWNjZWxlcmF0aW9uRGF0YSB7XG4gIC8qKlxuICAgKiBBbW91bnQgb2YgYWNjZWxlcmF0aW9uIG9uIHRoZSB4LWF4aXMuIChpbiBtL3NeMilcbiAgICovXG4gIHg6IG51bWJlcjtcblxuICAvKipcbiAgICogQW1vdW50IG9mIGFjY2VsZXJhdGlvbiBvbiB0aGUgeS1heGlzLiAoaW4gbS9zXjIpXG4gICAqL1xuICB5OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEFtb3VudCBvZiBhY2NlbGVyYXRpb24gb24gdGhlIHotYXhpcy4gKGluIG0vc14yKVxuICAgKi9cbiAgejogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBDcmVhdGlvbiB0aW1lc3RhbXAgaW4gbWlsbGlzZWNvbmRzLlxuICAgKi9cbiAgdGltZXN0YW1wOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGV2aWNlTW90aW9uQWNjZWxlcm9tZXRlck9wdGlvbnMge1xuICAvKipcbiAgICogUmVxdWVzdGVkIHBlcmlvZCBvZiBjYWxscyB0byBhY2NlbGVyb21ldGVyU3VjY2VzcyB3aXRoIGFjY2VsZXJhdGlvbiBkYXRhIGluIE1pbGxpc2Vjb25kcy4gRGVmYXVsdDogMTAwMDBcbiAgICovXG4gIGZyZXF1ZW5jeT86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBAbmFtZSBEZXZpY2UgTW90aW9uXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBgY29yZG92YS1wbHVnaW4tZGV2aWNlLW1vdGlvbmAuIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFtEZXZpY2UgTW90aW9uIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9hcGFjaGUvY29yZG92YS1wbHVnaW4tZGV2aWNlLW1vdGlvbikuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBEZXZpY2VNb3Rpb24sIERldmljZU1vdGlvbkFjY2VsZXJhdGlvbkRhdGEgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2RldmljZS1tb3Rpb24vbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGRldmljZU1vdGlvbjogRGV2aWNlTW90aW9uKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiAvLyBHZXQgdGhlIGRldmljZSBjdXJyZW50IGFjY2VsZXJhdGlvblxuICogdGhpcy5kZXZpY2VNb3Rpb24uZ2V0Q3VycmVudEFjY2VsZXJhdGlvbigpLnRoZW4oXG4gKiAgIChhY2NlbGVyYXRpb246IERldmljZU1vdGlvbkFjY2VsZXJhdGlvbkRhdGEpID0+IGNvbnNvbGUubG9nKGFjY2VsZXJhdGlvbiksXG4gKiAgIChlcnJvcjogYW55KSA9PiBjb25zb2xlLmxvZyhlcnJvcilcbiAqICk7XG4gKlxuICogLy8gV2F0Y2ggZGV2aWNlIGFjY2VsZXJhdGlvblxuICogdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuZGV2aWNlTW90aW9uLndhdGNoQWNjZWxlcmF0aW9uKCkuc3Vic2NyaWJlKChhY2NlbGVyYXRpb246IERldmljZU1vdGlvbkFjY2VsZXJhdGlvbkRhdGEpID0+IHtcbiAqICAgY29uc29sZS5sb2coYWNjZWxlcmF0aW9uKTtcbiAqIH0pO1xuICpcbiAqIC8vIFN0b3Agd2F0Y2hcbiAqIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICpcbiAqIGBgYFxuICogQGludGVyZmFjZXNcbiAqIERldmljZU1vdGlvbkFjY2VsZXJhdGlvbkRhdGFcbiAqIERldmljZU1vdGlvbkFjY2VsZXJvbWV0ZXJPcHRpb25zXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnRGV2aWNlTW90aW9uJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tZGV2aWNlLW1vdGlvbicsXG4gIHBsdWdpblJlZjogJ25hdmlnYXRvci5hY2NlbGVyb21ldGVyJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9hcGFjaGUvY29yZG92YS1wbHVnaW4tZGV2aWNlLW1vdGlvbicsXG4gIHBsYXRmb3JtczogW1xuICAgICdBbmRyb2lkJyxcbiAgICAnQmxhY2tCZXJyeSAxMCcsXG4gICAgJ0Jyb3dzZXInLFxuICAgICdGaXJlZm94IE9TJyxcbiAgICAnaU9TJyxcbiAgICAnVGl6ZW4nLFxuICAgICdVYnVudHUnLFxuICAgICdXaW5kb3dzJyxcbiAgICAnV2luZG93cyBQaG9uZSA4JyxcbiAgXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRGV2aWNlTW90aW9uIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogR2V0IHRoZSBjdXJyZW50IGFjY2VsZXJhdGlvbiBhbG9uZyB0aGUgeCwgeSwgYW5kIHogYXhlcy5cbiAgICogQHJldHVybnMge1Byb21pc2U8RGV2aWNlTW90aW9uQWNjZWxlcmF0aW9uRGF0YT59IFJldHVybnMgb2JqZWN0IHdpdGggeCwgeSwgeiwgYW5kIHRpbWVzdGFtcCBwcm9wZXJ0aWVzXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldEN1cnJlbnRBY2NlbGVyYXRpb24oKTogUHJvbWlzZTxEZXZpY2VNb3Rpb25BY2NlbGVyYXRpb25EYXRhPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFdhdGNoIHRoZSBkZXZpY2UgYWNjZWxlcmF0aW9uLiBDbGVhciB0aGUgd2F0Y2ggYnkgdW5zdWJzY3JpYmluZyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgKiBAcGFyYW0ge0FjY2VsZXJvbWV0ZXJPcHRpb25zfSBvcHRpb25zIGxpc3Qgb2Ygb3B0aW9ucyBmb3IgdGhlIGFjY2VsZXJvbWV0ZXIuXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPERldmljZU1vdGlvbkFjY2VsZXJhdGlvbkRhdGE+fSBPYnNlcnZhYmxlIHJldHVybnMgYW4gb2JzZXJ2YWJsZSB0aGF0IHlvdSBjYW4gc3Vic2NyaWJlIHRvXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxuICAgIG9ic2VydmFibGU6IHRydWUsXG4gICAgY2xlYXJGdW5jdGlvbjogJ2NsZWFyV2F0Y2gnLFxuICB9KVxuICB3YXRjaEFjY2VsZXJhdGlvbihvcHRpb25zPzogRGV2aWNlTW90aW9uQWNjZWxlcm9tZXRlck9wdGlvbnMpOiBPYnNlcnZhYmxlPERldmljZU1vdGlvbkFjY2VsZXJhdGlvbkRhdGE+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==