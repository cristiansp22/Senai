import { __decorate, __extends } from "tslib";
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
import { Injectable } from '@angular/core';
var Gyroscope = /** @class */ (function (_super) {
    __extends(Gyroscope, _super);
    function Gyroscope() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Watching for gyroscope sensor changes
     * @param {GyroscopeOptions} [options]
     * @return {Observable<GyroscopeOrientation>} Returns an Observable that resolves GyroscopeOrientation
     */
    Gyroscope.prototype.watch = function (options) {
        return new Observable(function (observer) {
            var watchId = navigator.gyroscope.watch(observer.next.bind(observer), observer.next.bind(observer), options);
            return function () { return navigator.gyroscope.clearWatch(watchId); };
        });
    };
    Gyroscope.prototype.getCurrent = function (options) { return cordova(this, "getCurrent", { "callbackOrder": "reverse" }, arguments); };
    Gyroscope.pluginName = "Gyroscope";
    Gyroscope.plugin = "cordova-plugin-gyroscope";
    Gyroscope.pluginRef = "navigator.gyroscope";
    Gyroscope.repo = "https://github.com/NeoLSN/cordova-plugin-gyroscope";
    Gyroscope.platforms = ["Android", "iOS"];
    Gyroscope = __decorate([
        Injectable()
    ], Gyroscope);
    return Gyroscope;
}(IonicNativePlugin));
export { Gyroscope };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2d5cm9zY29wZS9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNsQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztJQWlGWiw2QkFBaUI7Ozs7SUFDOUM7Ozs7T0FJRztJQUNILHlCQUFLLEdBQUwsVUFBTSxPQUEwQjtRQUM5QixPQUFPLElBQUksVUFBVSxDQUF1QixVQUFDLFFBQWE7WUFDeEQsSUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDL0csT0FBTyxjQUFNLE9BQUEsU0FBUyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQXZDLENBQXVDLENBQUM7UUFDdkQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBVUQsOEJBQVUsYUFBQyxPQUEwQjs7Ozs7O0lBckIxQixTQUFTO1FBRHJCLFVBQVUsRUFBRTtPQUNBLFNBQVM7b0JBbkZ0QjtFQW1GK0IsaUJBQWlCO1NBQW5DLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZGVjbGFyZSBjb25zdCBuYXZpZ2F0b3I6IGFueTtcblxuLyoqXG4gKiAgQGhpZGRlblxuICovXG5leHBvcnQgaW50ZXJmYWNlIEd5cm9zY29wZU9yaWVudGF0aW9uIHtcbiAgLyoqXG4gICAqICBSZXByZXNlbnQgeC1heGlzXG4gICAqL1xuICB4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqICBSZXByZXNlbnQgeS1heGlzXG4gICAqL1xuICB5OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqICBSZXByZXNlbnQgei1heGlzXG4gICAqL1xuICB6OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqICBSZXByZXNlbnQgdGltZXN0YW1wIG9mIHNlbnNvciByZWFkLiBEZWZhdWx0IGlzIDEwMDAwbXNcbiAgICovXG4gIHRpbWVzdGFtcDogbnVtYmVyO1xufVxuXG4vKipcbiAqICBAaGlkZGVuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgR3lyb3Njb3BlT3B0aW9ucyB7XG4gIC8qKlxuICAgKiAgUmVwcmVzZW50IGhvdyBvZnRlbiAoaW4gbWlsbGlzZWNvbmRzKSBzZW5zb3Igc2hvdWxkIGJlIHJlYWQuICBEZWZhdWx0IGlzIDEwMDAwIG1zXG4gICAqL1xuICBmcmVxdWVuY3k6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBAbmFtZSBHeXJvc2NvcGVcbiAqIEBkZXNjcmlwdGlvbiBSZWFkIEd5cm9zY29wZSBzZW5zb3IgZGF0YVxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBHeXJvc2NvcGUsIEd5cm9zY29wZU9yaWVudGF0aW9uLCBHeXJvc2NvcGVPcHRpb25zIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9neXJvc2NvcGUvbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBneXJvc2NvcGU6IEd5cm9zY29wZSkgeyB9XG4gKlxuICogLi4uXG4gKlxuICpcbiAqIGxldCBvcHRpb25zOiBHeXJvc2NvcGVPcHRpb25zID0ge1xuICogICAgZnJlcXVlbmN5OiAxMDAwXG4gKiB9XG4gKlxuICogdGhpcy5neXJvc2NvcGUuZ2V0Q3VycmVudChvcHRpb25zKVxuICogICAudGhlbigob3JpZW50YXRpb246IEd5cm9zY29wZU9yaWVudGF0aW9uKSA9PiB7XG4gKiAgICAgIGNvbnNvbGUubG9nKG9yaWVudGF0aW9uLngsIG9yaWVudGF0aW9uLnksIG9yaWVudGF0aW9uLnosIG9yaWVudGF0aW9uLnRpbWVzdGFtcCk7XG4gKiAgICB9KVxuICogICAuY2F0Y2goKVxuICpcbiAqXG4gKiB0aGlzLmd5cm9zY29wZS53YXRjaCgpXG4gKiAgICAuc3Vic2NyaWJlKChvcmllbnRhdGlvbjogR3lyb3Njb3BlT3JpZW50YXRpb24pID0+IHtcbiAqICAgICAgIGNvbnNvbGUubG9nKG9yaWVudGF0aW9uLngsIG9yaWVudGF0aW9uLnksIG9yaWVudGF0aW9uLnosIG9yaWVudGF0aW9uLnRpbWVzdGFtcCk7XG4gKiAgICB9KTtcbiAqXG4gKiBgYGBcbiAqIEBpbnRlcmZhY2VzXG4gKiBHeXJvc2NvcGVPcmllbnRhdGlvblxuICogR3lyb3Njb3BlT3B0aW9uc1xuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0d5cm9zY29wZScsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWd5cm9zY29wZScsXG4gIHBsdWdpblJlZjogJ25hdmlnYXRvci5neXJvc2NvcGUnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL05lb0xTTi9jb3Jkb3ZhLXBsdWdpbi1neXJvc2NvcGUnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgR3lyb3Njb3BlIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogV2F0Y2hpbmcgZm9yIGd5cm9zY29wZSBzZW5zb3IgY2hhbmdlc1xuICAgKiBAcGFyYW0ge0d5cm9zY29wZU9wdGlvbnN9IFtvcHRpb25zXVxuICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPEd5cm9zY29wZU9yaWVudGF0aW9uPn0gUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgcmVzb2x2ZXMgR3lyb3Njb3BlT3JpZW50YXRpb25cbiAgICovXG4gIHdhdGNoKG9wdGlvbnM/OiBHeXJvc2NvcGVPcHRpb25zKTogT2JzZXJ2YWJsZTxHeXJvc2NvcGVPcmllbnRhdGlvbj4ge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZTxHeXJvc2NvcGVPcmllbnRhdGlvbj4oKG9ic2VydmVyOiBhbnkpID0+IHtcbiAgICAgIGNvbnN0IHdhdGNoSWQgPSBuYXZpZ2F0b3IuZ3lyb3Njb3BlLndhdGNoKG9ic2VydmVyLm5leHQuYmluZChvYnNlcnZlciksIG9ic2VydmVyLm5leHQuYmluZChvYnNlcnZlciksIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuICgpID0+IG5hdmlnYXRvci5neXJvc2NvcGUuY2xlYXJXYXRjaCh3YXRjaElkKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgY3VycmVudCBkYXRhIGZyb20gZ3lyb3Njb3BlIHNlbnNvclxuICAgKiBAcGFyYW0ge0d5cm9zY29wZU9wdGlvbnN9IFtvcHRpb25zXVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEd5cm9zY29wZU9yaWVudGF0aW9uPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBHeXJvc2NvcGVPcmllbnRhdGlvblxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcbiAgfSlcbiAgZ2V0Q3VycmVudChvcHRpb25zPzogR3lyb3Njb3BlT3B0aW9ucyk6IFByb21pc2U8R3lyb3Njb3BlT3JpZW50YXRpb24+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==